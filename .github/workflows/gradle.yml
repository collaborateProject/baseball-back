name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    # 1. Java 17 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # 2. gradlew 파일에 실행 권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # 3. Spring Boot 애플리케이션 빌드
    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: clean bootJar

    # 4. Docker 이미지 빌드
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo:latest .

    # 5. DockerHub 로그인
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # 6. Docker Hub 이미지 푸시
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo:latest

  run-docker-image-on-ec2:
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      # 1. 최신 이미지를 풀받습니다
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo
        
      #2. 8080 포트 중지 밑 삭제
      - name: Stop and remove container using port 8080
        run: |
          CONTAINER_ID=$(sudo docker ps -q -f "publish=8080")
          if [ -n "$CONTAINER_ID" ]; then
            echo "Stopping container with ID $CONTAINER_ID"
            sudo docker stop "$CONTAINER_ID"
            echo "Removing container with ID $CONTAINER_ID"
            sudo docker rm "$CONTAINER_ID"
          else
            echo "No container is using port 8080"
          fi
        
      # 4. 최신 이미지를 컨테이너화하여 실행시킵니다
      
      - name: docker run new container
        run: sudo docker run --name github-actions-demo --rm -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/github-actions-demo



      # 5. 미사용 이미지를 정리합니다
      - name: delete old docker image
        run: sudo docker system prune -f --volumes
